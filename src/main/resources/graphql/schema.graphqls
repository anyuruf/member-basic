scalar Date

type MemberBasic {
  id: ID
  firstName: String
  lastName: String
  description: String
  gender: Gender
  dob: Date
}

input MemberBasicInput {
  firstName: String!
  lastName: String!
  description:String!
  gender: Gender!
  dob: Date!
}

input EditMemberInput {
  firstName: String!
  lastName: String!
  description:String!
  gender: Gender!
  dob: Date!
}

type Link {
  id: ID
  source: String
  target: String
  parent: Parent
}

input LinkInput {
  id: ID
  source: String
  target: String
  parent: Parent
}

enum Parent {
  FATHER
  MOTHER
}

enum Gender {
  MALE
  FEMALE
}

type Query {
  getAllMembers: [MemberBasic]
  getFamilyMember(id): MemberBasic
  getLinks: [Link]
}

type Mutation {
  addMember(memberBasicInput: MemberBasicInput!): MemberBasic
  editMemmber(editMemberInput: EditMemberInput!): MemberBasic
  addLink(linkInput: LinkInput): Link
  addLinks(links: [LinkInput]): [Link]
  editLink(linkInput: LinkInput): Link
}
